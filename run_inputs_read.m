% Copyright (C) 2015 Alberto Otero-de-la-Roza <aoterodelaroza@gmail.com>
%
% dcp is free software: you can redistribute it and/or modify it under
% the terms of the GNU General Public License as published by the Free
% Software Foundation, either version 3 of the License, or (at your
% option) any later version. See <http://www.gnu.org/licenses/>.
%
% The routine distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
% FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
% more details.

function sout = run_inputs_read(ilist,xdmcoef=[],xdmfun="",extrad3="")
  %% function run_inputs_read(ilist,xdmcoef=[],xdmfun="",extrad3="")
  %% 
  %% Read the calculation results for the inputs in the job list
  %% (ilist). If xdmcoef is non-empty, run postg on the resulting wfx
  %% with the indicated parameters and the functional in xdmfun.
  %%
  %% This version reads the outputs corresponding to the inputs created
  %% by run_inputs_pass. The idea is to have a two-step process in which
  %% the inputs are generated by run_inputs_pass, then the calculations
  %% are run manually, and the final results are calculated by run_inputs_read. 
  
  global iload ferr nstep prefix
  
  ## Debug
  if (ferr > 0) 
    fprintf(ferr,"# Start run_inputs_read - %s\n",strtrim(ctime(time())));
    fflush(ferr);
  endif

  ## Copy of the output files in the prefix_name directory to the current directory
  adir = sprintf("%s_%4.4d",prefix,nstep)
  for i = 1:length(ilist)
    name = ilist{i};
    [s out] = system(sprintf("cp -f %s/%s.* .",adir,name));
  endfor

  ## Set a load of 1 for all the jobs
  iload = ones(size(ilist));

  ## Check that we have a normal termination. If not, pass the error 
  ## back to the caller.
  if (ferr > 0) 
    fprintf(ferr,"# Check for normal/error termination - %s\n",strtrim(ctime(time())));
    fflush(ferr);
  endif
  sout = [];
  for i = 1:length(ilist)
    if (ferr > 0) 
      fprintf(ferr,"# normal/error termination %d (%s) - %s\n",i,ilist{i},strtrim(ctime(time())));
      fflush(ferr);
    endif
    if (!exist(sprintf("%s.log",ilist{i}),"file"))
      sout = [sout i];
      continue
    endif
    [s out] = system(sprintf("tail -n 1 %s.log | grep 'Normal termination' | wc -l",ilist{i}));
    if (str2num(out) == 0)
      sout = [sout i];
    endif
  endfor  

  ## Debug
  if (ferr > 0) 
    fprintf(ferr,"# End run_inputs_elcap3 - %s\n",strtrim(ctime(time())));
    fflush(ferr);
  endif

endfunction
